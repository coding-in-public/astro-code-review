---
import { getImage } from "astro:assets";

import Footer from "@/components/Footer.astro";
import Stars from "@/components/Stars.astro";
import noiseImg from "../assets/noise.webp";
import LineStreak from "../components/LineStreak.astro";
import Noise from "../components/Noise.astro";
import { Toaster } from "react-hot-toast";

const noiseBkg = await getImage({ src: noiseImg, format: "avif" });

type Props = {
  title: string;
  description: string;
};

const { title, description } = Astro.props;
---

<html lang="en" style="color-scheme: dark;">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <title>{title}</title>
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
    <meta name="msapplication-TileColor" content="#23262D" />
    <meta name="theme-color" content="#23262D" />
  </head>
  <body class="max-w-[2000px] mx-auto">
    <Toaster
      client:load
      toastOptions={{
        className: "",
        style: {
          border: "1px solid #445060",
          minWidth: "250px",
          background: "#23262D",
          color: "#eceff2",
          boxShadow:
            "-1px 4px 8px hsl(0 67.9% 52.4% / .2), 2px 3px 7px hsl(300 100% 63.5% / .1)",
        },
        success: {
          iconTheme: {
            primary: "#F340C6",
            secondary: "#eceff2",
          },
        },
      }}
    />
    <main
      class="min-h-screen bg-astro-800 text-astro-200 relative z-0 overflow-hidden"
    >
      <div class="opacity-50 md:opacity-90">
        <Stars classes="-top-4 -left-16 shift-right fade-in hidden md:block" />
        <Stars classes="-bottom-16 shift-left fade-in -right-20" />
      </div>
      <Noise />
      <LineStreak classes="top-12 rotate-12 right-0" />
      <LineStreak
        classes="bottom-4 rotate-[135deg] -left-20"
        delayInSeconds={4}
      />
      <div
        style={`background-image: url(${noiseBkg.src});`}
        class="absolute inset-0 opacity-40 mix-blend-overlay pointer-events-none -z-20"
      >
      </div>
      <div class="grid min-h-screen grid-rows-1fr-auto">
        <div class="grid gap-6 sm:gap-8">
          <slot />
        </div>
        <Footer />
      </div>
      <Noise
        showGrid={false}
        showMiddleDarkArea={false}
        purpleClasses="left-auto -right-1/4 -bottom-1/2 top-auto w-screen"
        redClasses="top-auto -bottom-1/2 right-1/4 left-auto w-screen"
      />
    </main>
    <script>
      const observables = document.querySelectorAll(
        ".fade-in, .shift-up, .shift-left, .shift-right"
      );
      const observer = new IntersectionObserver(
        function (entries, observer) {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("active");
              observer.unobserve(entry.target);
            }
          });
        },
        {
          threshold: 0.5,
        }
      );
      observables.forEach((observable) => {
        observer.observe(observable);
      });
    </script>
  </body>
</html>
